/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas;

import Auxiliares.Archivo;
import Auxiliares.DescribePath;
import formas.Figura;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.geom.Area;
import java.awt.geom.GeneralPath;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Jirok
 */
public class Principal extends javax.swing.JFrame implements ActionListener {

    //MiPanel miPanel=new MiPanel();
    /**
     * Creates new form Principal
     */
    Archivo archivos=new Archivo();
    public Principal() {
        initComponents();
        addlisteners();
        this.setLocationRelativeTo(null);
        //jPanel1.add(miPanel);
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        //this.setSize(screenSize.width, screenSize.height);
        this.setPreferredSize(new Dimension(1024, 768));
        this.setVisible(true);
        this.setSize(1024, 768);
        this.setResizable(true);
        this.setTitle("Paint");
        this.color.setBackground(Color.black);
        this.sliderstroke.setMinimum(1);
        this.sliderstroke.setMaximum(20);
        this.sliderstroke.setValue(1);
        this.slideralfa.setMinimum(1);
        this.slideralfa.setMaximum(100);
        this.slideralfa.setValue(100);
        actualizaMisObjetos();
        OyenteDeRaton miOyente = new OyenteDeRaton();
       OyenteDeMovimiento miOyente2 = new OyenteDeMovimiento();
        this.addMouseListener(miOyente);
        this.addMouseMotionListener(miOyente2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelHerram = new javax.swing.JPanel();
        panelDib = new javax.swing.JPanel();
        linea = new javax.swing.JButton();
        rectangulo = new javax.swing.JButton();
        elipse = new javax.swing.JButton();
        dibujarf = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        triangulo = new javax.swing.JButton();
        pentagono = new javax.swing.JButton();
        hexagono = new javax.swing.JButton();
        panelAtrib = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        color = new javax.swing.JButton();
        relleno = new javax.swing.JCheckBox();
        colorrelleno = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        sliderstroke = new javax.swing.JSlider();
        numstroke = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tipolinea = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        slideralfa = new javax.swing.JSlider();
        numalfa = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        select = new javax.swing.JButton();
        selectmult = new javax.swing.JButton();
        move = new javax.swing.JButton();
        rota = new javax.swing.JButton();
        escala = new javax.swing.JButton();
        shearing = new javax.swing.JButton();
        ListaConjuntos = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        x = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        y = new javax.swing.JLabel();
        elimina = new javax.swing.JButton();
        miPanel = new MiPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        archivo = new javax.swing.JMenu();
        nuevo = new javax.swing.JMenuItem();
        gfig = new javax.swing.JMenuItem();
        abrir = new javax.swing.JMenuItem();
        guardar = new javax.swing.JMenuItem();
        salir = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelHerram.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        panelDib.setBorder(javax.swing.BorderFactory.createTitledBorder("Dibujo"));

        linea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/linea.jpg"))); // NOI18N
        linea.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        linea.setBorderPainted(false);
        linea.setMaximumSize(new java.awt.Dimension(30, 30));
        linea.setMinimumSize(new java.awt.Dimension(30, 30));
        linea.setPreferredSize(new java.awt.Dimension(30, 30));

        rectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/rectangulo.jpg"))); // NOI18N
        rectangulo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        rectangulo.setBorderPainted(false);
        rectangulo.setMaximumSize(new java.awt.Dimension(30, 30));
        rectangulo.setMinimumSize(new java.awt.Dimension(30, 30));
        rectangulo.setPreferredSize(new java.awt.Dimension(30, 30));

        elipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/elipse.jpg"))); // NOI18N
        elipse.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        elipse.setBorderPainted(false);
        elipse.setMaximumSize(new java.awt.Dimension(30, 30));
        elipse.setMinimumSize(new java.awt.Dimension(30, 30));
        elipse.setPreferredSize(new java.awt.Dimension(30, 30));

        dibujarf.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione" }));

        jLabel2.setText("Personalizadas");

        triangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/triangulo.jpg"))); // NOI18N
        triangulo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        triangulo.setBorderPainted(false);
        triangulo.setMaximumSize(new java.awt.Dimension(30, 30));
        triangulo.setMinimumSize(new java.awt.Dimension(30, 30));
        triangulo.setPreferredSize(new java.awt.Dimension(30, 30));
        triangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trianguloActionPerformed(evt);
            }
        });

        pentagono.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/pentagono.jpg"))); // NOI18N
        pentagono.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pentagono.setBorderPainted(false);
        pentagono.setMaximumSize(new java.awt.Dimension(30, 30));
        pentagono.setMinimumSize(new java.awt.Dimension(30, 30));
        pentagono.setPreferredSize(new java.awt.Dimension(30, 30));
        pentagono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pentagonoActionPerformed(evt);
            }
        });

        hexagono.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/hexagono.jpg"))); // NOI18N
        hexagono.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        hexagono.setBorderPainted(false);
        hexagono.setMaximumSize(new java.awt.Dimension(30, 30));
        hexagono.setMinimumSize(new java.awt.Dimension(30, 30));
        hexagono.setPreferredSize(new java.awt.Dimension(30, 30));
        hexagono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hexagonoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelDibLayout = new javax.swing.GroupLayout(panelDib);
        panelDib.setLayout(panelDibLayout);
        panelDibLayout.setHorizontalGroup(
            panelDibLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDibLayout.createSequentialGroup()
                .addComponent(linea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rectangulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(elipse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(triangulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pentagono, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hexagono, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(panelDibLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dibujarf, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelDibLayout.setVerticalGroup(
            panelDibLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDibLayout.createSequentialGroup()
                .addGroup(panelDibLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(linea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rectangulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(elipse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(triangulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pentagono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hexagono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelDibLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dibujarf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelAtrib.setBorder(javax.swing.BorderFactory.createTitledBorder("Atributos"));

        jLabel1.setText("Color");

        color.setMaximumSize(new java.awt.Dimension(25, 25));
        color.setMinimumSize(new java.awt.Dimension(25, 25));
        color.setPreferredSize(new java.awt.Dimension(25, 25));
        color.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorActionPerformed(evt);
            }
        });

        relleno.setText("Relleno");
        relleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rellenoActionPerformed(evt);
            }
        });

        colorrelleno.setBackground(new java.awt.Color(0, 0, 0));
        colorrelleno.setEnabled(false);
        colorrelleno.setMaximumSize(new java.awt.Dimension(25, 25));
        colorrelleno.setMinimumSize(new java.awt.Dimension(25, 25));
        colorrelleno.setPreferredSize(new java.awt.Dimension(25, 25));
        colorrelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorrellenoActionPerformed(evt);
            }
        });

        jLabel3.setText("grosor");

        sliderstroke.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderstrokeStateChanged(evt);
            }
        });

        numstroke.setText("20");

        jLabel4.setText("Linea");

        tipolinea.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "continua", "discontinua" }));

        jLabel5.setText("Transparencia");

        slideralfa.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slideralfaStateChanged(evt);
            }
        });

        numalfa.setText("100");

        javax.swing.GroupLayout panelAtribLayout = new javax.swing.GroupLayout(panelAtrib);
        panelAtrib.setLayout(panelAtribLayout);
        panelAtribLayout.setHorizontalGroup(
            panelAtribLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAtribLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAtribLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAtribLayout.createSequentialGroup()
                        .addGroup(panelAtribLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panelAtribLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(color, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(relleno)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(colorrelleno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelAtribLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sliderstroke, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(panelAtribLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelAtribLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numstroke)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAtribLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tipolinea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))))
                    .addGroup(panelAtribLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(slideralfa, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numalfa)
                        .addGap(74, 74, 74))))
        );
        panelAtribLayout.setVerticalGroup(
            panelAtribLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAtribLayout.createSequentialGroup()
                .addGroup(panelAtribLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(numstroke)
                    .addGroup(panelAtribLayout.createSequentialGroup()
                        .addGroup(panelAtribLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(colorrelleno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(relleno)
                            .addGroup(panelAtribLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(color, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(panelAtribLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(tipolinea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelAtribLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(sliderstroke, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelAtribLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(slideralfa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numalfa, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Herramientas"));

        select.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/seleccion.jpg"))); // NOI18N
        select.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        select.setBorderPainted(false);
        select.setMaximumSize(new java.awt.Dimension(30, 30));
        select.setMinimumSize(new java.awt.Dimension(30, 30));
        select.setPreferredSize(new java.awt.Dimension(30, 30));
        select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectActionPerformed(evt);
            }
        });

        selectmult.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/seleccionmul.jpg"))); // NOI18N
        selectmult.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        selectmult.setBorderPainted(false);
        selectmult.setMaximumSize(new java.awt.Dimension(30, 30));
        selectmult.setMinimumSize(new java.awt.Dimension(30, 30));
        selectmult.setPreferredSize(new java.awt.Dimension(30, 30));
        selectmult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectmultActionPerformed(evt);
            }
        });

        move.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/move.jpg"))); // NOI18N
        move.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        move.setBorderPainted(false);
        move.setMaximumSize(new java.awt.Dimension(30, 30));
        move.setMinimumSize(new java.awt.Dimension(30, 30));
        move.setPreferredSize(new java.awt.Dimension(30, 30));
        move.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveActionPerformed(evt);
            }
        });

        rota.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/rota.jpg"))); // NOI18N
        rota.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        rota.setBorderPainted(false);
        rota.setMaximumSize(new java.awt.Dimension(30, 30));
        rota.setMinimumSize(new java.awt.Dimension(30, 30));
        rota.setPreferredSize(new java.awt.Dimension(30, 30));
        rota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotaActionPerformed(evt);
            }
        });

        escala.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/escala.jpg"))); // NOI18N
        escala.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        escala.setBorderPainted(false);
        escala.setMaximumSize(new java.awt.Dimension(30, 30));
        escala.setMinimumSize(new java.awt.Dimension(30, 30));
        escala.setPreferredSize(new java.awt.Dimension(30, 30));
        escala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escalaActionPerformed(evt);
            }
        });

        shearing.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/shearing.jpg"))); // NOI18N
        shearing.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        shearing.setBorderPainted(false);
        shearing.setMaximumSize(new java.awt.Dimension(30, 30));
        shearing.setMinimumSize(new java.awt.Dimension(30, 30));
        shearing.setPreferredSize(new java.awt.Dimension(30, 30));
        shearing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shearingActionPerformed(evt);
            }
        });

        ListaConjuntos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "UNION", "INTERSECCION", "SUBSTRAE 1 DE 2", "SUBSTRAE 2 DE 1", "XOR" }));
        ListaConjuntos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListaConjuntosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(select, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectmult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(move, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(shearing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(escala, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rota, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ListaConjuntos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(select, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectmult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(move, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shearing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(escala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ListaConjuntos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel6.setText("X: ");

        x.setText("jLabel7");

        jLabel7.setText("Y: ");

        y.setText("jLabel8");

        elimina.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/eliminar.jpg"))); // NOI18N
        elimina.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        elimina.setBorderPainted(false);
        elimina.setMaximumSize(new java.awt.Dimension(30, 30));
        elimina.setMinimumSize(new java.awt.Dimension(30, 30));
        elimina.setPreferredSize(new java.awt.Dimension(30, 30));
        elimina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelHerramLayout = new javax.swing.GroupLayout(panelHerram);
        panelHerram.setLayout(panelHerramLayout);
        panelHerramLayout.setHorizontalGroup(
            panelHerramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHerramLayout.createSequentialGroup()
                .addComponent(panelDib, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelAtrib, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelHerramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelHerramLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(x))
                    .addGroup(panelHerramLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(y))
                    .addGroup(panelHerramLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(elimina, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelHerramLayout.setVerticalGroup(
            panelHerramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHerramLayout.createSequentialGroup()
                .addGroup(panelHerramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelHerramLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(panelHerramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(panelAtrib, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelDib, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(panelHerramLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(panelHerramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(x))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelHerramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(y))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(elimina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        miPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        miPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                miPanelMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout miPanelLayout = new javax.swing.GroupLayout(miPanel);
        miPanel.setLayout(miPanelLayout);
        miPanelLayout.setHorizontalGroup(
            miPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 974, Short.MAX_VALUE)
        );
        miPanelLayout.setVerticalGroup(
            miPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 548, Short.MAX_VALUE)
        );

        archivo.setText("Archivo");

        nuevo.setText("Nuevo");
        nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoActionPerformed(evt);
            }
        });
        archivo.add(nuevo);

        gfig.setText("Guardar Figura");
        gfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gfigActionPerformed(evt);
            }
        });
        archivo.add(gfig);

        abrir.setText("Abrir sesion");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        archivo.add(abrir);

        guardar.setText("Guardar sesion");
        archivo.add(guardar);

        salir.setText("Salir");
        archivo.add(salir);

        jMenuBar1.add(archivo);

        jMenu1.setText("Mas");

        jMenuItem1.setText("Acerca de");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelHerram, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(miPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelHerram, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(miPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_abrirActionPerformed

    private void rellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rellenoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rellenoActionPerformed

    private void miPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_miPanelMouseReleased
        // TODO add your handling code here:
        if(!miPanel.creafigura){
                dibujarf.setSelectedIndex(0);
            }
    }//GEN-LAST:event_miPanelMouseReleased

    private void colorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_colorActionPerformed

    private void colorrellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorrellenoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_colorrellenoActionPerformed

    private void sliderstrokeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderstrokeStateChanged
        // TODO add your handling code here:
        this.numstroke.setText(this.sliderstroke.getValue()+"");
        miPanel.setStrokeactual(this.sliderstroke.getValue());
    }//GEN-LAST:event_sliderstrokeStateChanged

    private void gfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gfigActionPerformed

        if (miPanel.seleccion && !miPanel.mulsel) {
            archivos.ingresaFigura(miPanel.formaselect.get(0));
            actualizaMisObjetos();
            miPanel.limpiaselect();
        }else{
            JOptionPane.showMessageDialog(this, "Seleccione una sola figura con seleccion simple");
        }

    }//GEN-LAST:event_gfigActionPerformed

    private void slideralfaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slideralfaStateChanged
        // TODO add your handling code here:
        this.numalfa.setText(this.slideralfa.getValue()+"");
        System.out.println((float)this.slideralfa.getValue()/100);
        miPanel.setalfa((float)this.slideralfa.getValue()/100);
        
    }//GEN-LAST:event_slideralfaStateChanged

    private void rotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotaActionPerformed
        // TODO add your handling code here:
        if(select.isBorderPainted()||selectmult.isBorderPainted()){
            //miPanel.limpiatransform();
            pintarborde("rota");
        this.miPanel.rota();}
    }//GEN-LAST:event_rotaActionPerformed

    private void escalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escalaActionPerformed
        // TODO add your handling code here:
        if(select.isBorderPainted()||selectmult.isBorderPainted()){
            //miPanel.limpiatransform();
            pintarborde("escala");
        this.miPanel.escala();}
    }//GEN-LAST:event_escalaActionPerformed

    private void shearingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shearingActionPerformed
        // TODO add your handling code here:
        if(select.isBorderPainted()||selectmult.isBorderPainted()){
            //miPanel.limpiatransform();
            pintarborde("shearing");
        this.miPanel.shearing();}
    }//GEN-LAST:event_shearingActionPerformed

    private void moveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveActionPerformed
        // TODO add your handling code here:
        if(select.isBorderPainted()||selectmult.isBorderPainted()){
            //miPanel.limpiatransform();
            pintarborde("move");
            this.miPanel.mover();}
    }//GEN-LAST:event_moveActionPerformed

    private void ListaConjuntosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListaConjuntosActionPerformed
        // TODO add your handling code here:
        if (miPanel.mulsel) {
            if (miPanel.formaselect.size() == 2) {
                if (ListaConjuntos.getSelectedIndex() != 0) {
                    Area a1 = new Area(miPanel.formaselect.get(0).getShape());
                    Area a2 = new Area(miPanel.formaselect.get(1).getShape());
                    Area a=new Area();
                    Figura f=new Figura();
                    DescribePath despath = new DescribePath();
                    String command = ListaConjuntos.getItemAt(ListaConjuntos.getSelectedIndex());
                    miPanel.quitarFiguras(miPanel.formaselect.get(0));
                    miPanel.quitarFiguras(miPanel.formaselect.get(1));
                    if (null != command) {
                        switch (command) {
                            case "UNION":
                                a1.add(a2);
                                a=a1;
                                a=a1;
                                break;
                            case "INTERSECCION":
                                a1.intersect(a2);
                                a=a1;
                                break;
                            case "SUBSTRAE 1 DE 2":
                                a1.subtract(a2);
                                a=a1;
                                break;
                            case "SUBSTRAE 2 DE 1":
                                a2.subtract(a1);
                                a=a2;
                                break;
                            case "XOR":
                                a1.exclusiveOr(a2);
                                a=a1;
                                break;
                        }
                    }
                    f = new Figura((Shape) a, miPanel.getStrokeactual(), despath.obtenerPath(a), Color.black, 1);
                    miPanel.formas.add(f);
                    System.out.println(miPanel.formas.size());
                    miPanel.formaselect.clear();
                    ListaConjuntos.setSelectedIndex(0);
                    System.out.println("figuras: "+miPanel.formas.size());
                    System.out.println(f.getShape().getBounds2D().getX());
                    System.out.println(f.getShape().getBounds2D().getY());
                    miPanel.limpiatransform();
                    miPanel.limpiaselect();
                } else {
                    ListaConjuntos.setSelectedIndex(0);
                }
            } else {
                ListaConjuntos.setSelectedIndex(0);
            }
        } else {
            ListaConjuntos.setSelectedIndex(0);
        }
    }//GEN-LAST:event_ListaConjuntosActionPerformed

    private void selectmultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectmultActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectmultActionPerformed

    private void selectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectActionPerformed

    private void trianguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trianguloActionPerformed
        // TODO add your handling code here:
        //triangulo

            if(miPanel.fig!=4){
                miPanel.fig=4;
                pintarborde("triangulo");
                miPanel.limpiaselect();
                miPanel.creafigura=true;
            }else{
            miPanel.creafigura=false;
            miPanel.fig=-1;
            triangulo.setBorderPainted(false);
            }
    }//GEN-LAST:event_trianguloActionPerformed

    private void pentagonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pentagonoActionPerformed
        // TODO add your handling code here:
        if(miPanel.fig!=5){
                miPanel.fig=5;
                pintarborde("pentagono");
                miPanel.limpiaselect();
                miPanel.creafigura=true;
            }else{
            miPanel.creafigura=false;
            miPanel.fig=-1;
            pentagono.setBorderPainted(false);
            }
    }//GEN-LAST:event_pentagonoActionPerformed

    private void hexagonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hexagonoActionPerformed
        // TODO add your handling code here:
        if(miPanel.fig!=6){
                miPanel.fig=6;
                pintarborde("hexagono");
                miPanel.limpiaselect();
                miPanel.creafigura=true;
            }else{
            miPanel.creafigura=false;
            miPanel.fig=-1;
            hexagono.setBorderPainted(false);
            }
    }//GEN-LAST:event_hexagonoActionPerformed

    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nuevoActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Elaborado por Victor Manuel Jiménez Rosas");
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void eliminaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminaActionPerformed
        // TODO add your handling code here:
        //quitarFiguras(Figura f)
        miPanel.quitarFiguras(miPanel.formaselect);
    }//GEN-LAST:event_eliminaActionPerformed
public void actualizaMisObjetos(){
        
        String lista2[];
        //String lista1[] = new String[] { "Estrella","Pentagono", "Hexagono", "Fantasma", "Flecha", "Globo", "Petalo", "Corazon"};
        //String lista1[] = new String[] { "Seleccione"};
        HashMap<String,GeneralPath> h = archivos.leerFiguras();
        if (h != null){
            lista2 = new String[h.size()];
        }
        else{
            lista2 = new String[2];
        }
        /*for(i = 0;i<8;i++){
            lista2[i] = new String(lista1[i]);
        }//*/
        //i=6;
        int i=0;

        if (h != null){
            for (String nom : h.keySet()) {
                if (nom!=null){
                lista2[i] = new String(nom);
                i++;}
            }
        }
        dibujarf.setModel(new javax.swing.DefaultComboBoxModel<>(lista2));
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ListaConjuntos;
    private javax.swing.JMenuItem abrir;
    private javax.swing.JMenu archivo;
    private javax.swing.JButton color;
    private javax.swing.JButton colorrelleno;
    private javax.swing.JComboBox<String> dibujarf;
    public static javax.swing.JButton elimina;
    public static javax.swing.JButton elipse;
    public static javax.swing.JButton escala;
    private javax.swing.JMenuItem gfig;
    private javax.swing.JMenuItem guardar;
    public static javax.swing.JButton hexagono;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel2;
    public static javax.swing.JButton linea;
    private MiPanel miPanel;/*
    private javax.swing.JPanel miPanel;
    */
    public static javax.swing.JButton move;
    private javax.swing.JMenuItem nuevo;
    private javax.swing.JLabel numalfa;
    private javax.swing.JLabel numstroke;
    private javax.swing.JPanel panelAtrib;
    private javax.swing.JPanel panelDib;
    private javax.swing.JPanel panelHerram;
    public static javax.swing.JButton pentagono;
    public static javax.swing.JButton rectangulo;
    private javax.swing.JCheckBox relleno;
    public static javax.swing.JButton rota;
    private javax.swing.JMenuItem salir;
    public static javax.swing.JButton select;
    public static javax.swing.JButton selectmult;
    public static javax.swing.JButton shearing;
    private javax.swing.JSlider slideralfa;
    private javax.swing.JSlider sliderstroke;
    private javax.swing.JComboBox<String> tipolinea;
    public static javax.swing.JButton triangulo;
    public static javax.swing.JLabel x;
    public static javax.swing.JLabel y;
    // End of variables declaration//GEN-END:variables

    public void pintarborde(String n) {
        switch (n) {
            case"triangulo":
                linea.setBorderPainted(false);
                rectangulo.setBorderPainted(false);
                elipse.setBorderPainted(false);
                select.setBorderPainted(false);
                selectmult.setBorderPainted(false);
                move.setBorderPainted(false);
                triangulo.setBorderPainted(!triangulo.isBorderPainted());
                pentagono.setBorderPainted(false);
                hexagono.setBorderPainted(false);
                break;
            case"pentagono":
                linea.setBorderPainted(false);
                rectangulo.setBorderPainted(false);
                elipse.setBorderPainted(false);
                select.setBorderPainted(false);
                selectmult.setBorderPainted(false);
                move.setBorderPainted(false);
                triangulo.setBorderPainted(false);
                pentagono.setBorderPainted(!pentagono.isBorderPainted());
                hexagono.setBorderPainted(false);
                break;
            case"hexagono":
                linea.setBorderPainted(false);
                rectangulo.setBorderPainted(false);
                elipse.setBorderPainted(false);
                select.setBorderPainted(false);
                selectmult.setBorderPainted(false);
                move.setBorderPainted(false);
                triangulo.setBorderPainted(false);
                pentagono.setBorderPainted(false);
                hexagono.setBorderPainted(!hexagono.isBorderPainted());
                break;
            case "linea":
                linea.setBorderPainted(!linea.isBorderPainted());
                //linea.setBorderPainted(false);
                rectangulo.setBorderPainted(false);
                elipse.setBorderPainted(false);
                select.setBorderPainted(false);
                selectmult.setBorderPainted(false);
                move.setBorderPainted(false);
                triangulo.setBorderPainted(false);
                pentagono.setBorderPainted(false);
                hexagono.setBorderPainted(false);
                break;
            case "rectangulo":
                rectangulo.setBorderPainted(!rectangulo.isBorderPainted());
                linea.setBorderPainted(false);
                //rectangulo.setBorderPainted(false);
                elipse.setBorderPainted(false);
                select.setBorderPainted(false);
                selectmult.setBorderPainted(false);
                move.setBorderPainted(false);
                triangulo.setBorderPainted(false);
                pentagono.setBorderPainted(false);
                hexagono.setBorderPainted(false);
                break;
            case "elipse":
                elipse.setBorderPainted(!elipse.isBorderPainted());
                linea.setBorderPainted(false);
                rectangulo.setBorderPainted(false);
                //elipse.setBorderPainted(false);
                select.setBorderPainted(false);
                selectmult.setBorderPainted(false);
                move.setBorderPainted(false);
                triangulo.setBorderPainted(false);
                pentagono.setBorderPainted(false);
                hexagono.setBorderPainted(false);
                break;
            case "select":
                if (miPanel.seleccion) {
                    select.setBorderPainted(true);
                    selectmult.setBorderPainted(false);
                    linea.setBorderPainted(false);
                    rectangulo.setBorderPainted(false);
                    elipse.setBorderPainted(false);
                    triangulo.setBorderPainted(false);
                pentagono.setBorderPainted(false);
                hexagono.setBorderPainted(false);
                    //select.setBorderPainted(false);
                    selectmult.setBorderPainted(false);
                    move.setBorderPainted(false);
                } else {
                    select.setBorderPainted(false);
                }

                break;
            case "selectmult":
                if (miPanel.mulsel) {
                    selectmult.setBorderPainted(true);
                    select.setBorderPainted(false);
                    linea.setBorderPainted(false);
                    rectangulo.setBorderPainted(false);
                    elipse.setBorderPainted(false);
                    select.setBorderPainted(false);
                    triangulo.setBorderPainted(false);
                pentagono.setBorderPainted(false);
                hexagono.setBorderPainted(false);
                    //selectmult.setBorderPainted(false);
                    move.setBorderPainted(false);
                } else {
                    selectmult.setBorderPainted(false);
                }

                break;
            case "move":
                move.setBorderPainted(!move.isBorderPainted());
                //move.setBorderPainted(false);
                linea.setBorderPainted(false);
                rectangulo.setBorderPainted(false);
                elipse.setBorderPainted(false);
                triangulo.setBorderPainted(false);
                pentagono.setBorderPainted(false);
                hexagono.setBorderPainted(false);
                shearing.setBorderPainted(false);
                //reflect.setBorderPainted(false);
                escala.setBorderPainted(false);
                rota.setBorderPainted(false);

                break;
            case "rota":
                rota.setBorderPainted(!rota.isBorderPainted());
                linea.setBorderPainted(false);
                rectangulo.setBorderPainted(false);
                elipse.setBorderPainted(false);
                triangulo.setBorderPainted(false);
                pentagono.setBorderPainted(false);
                hexagono.setBorderPainted(false);
                shearing.setBorderPainted(false);
                //reflect.setBorderPainted(false);
                escala.setBorderPainted(false);
                move.setBorderPainted(false);
                break;
            /*
                shearing reflect escala
             */
            case "shearing":
                move.setBorderPainted(false);
                linea.setBorderPainted(false);
                rectangulo.setBorderPainted(false);
                elipse.setBorderPainted(false);
                triangulo.setBorderPainted(false);
                pentagono.setBorderPainted(false);
                hexagono.setBorderPainted(false);
                shearing.setBorderPainted(!shearing.isBorderPainted());
                //reflect.setBorderPainted(false);
                escala.setBorderPainted(false);
                rota.setBorderPainted(false);
                break;
            case "reflect":
                move.setBorderPainted(false);
                linea.setBorderPainted(false);
                rectangulo.setBorderPainted(false);
                elipse.setBorderPainted(false);
                triangulo.setBorderPainted(false);
                pentagono.setBorderPainted(false);
                hexagono.setBorderPainted(false);
                shearing.setBorderPainted(false);
                //reflect.setBorderPainted(!reflect.isBorderPainted());
                escala.setBorderPainted(false);
                rota.setBorderPainted(false);
                break;
            case "escala":
                move.setBorderPainted(false);
                linea.setBorderPainted(false);
                rectangulo.setBorderPainted(false);
                elipse.setBorderPainted(false);
                triangulo.setBorderPainted(false);
                pentagono.setBorderPainted(false);
                hexagono.setBorderPainted(false);
                shearing.setBorderPainted(false);
                //reflect.setBorderPainted(false);
                escala.setBorderPainted(!escala.isBorderPainted());
                rota.setBorderPainted(false);
                break;
        }
    }
    @Override
    public void actionPerformed(ActionEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        if (e.getSource() == nuevo) {
            miPanel.resetAll();
            borraborde();
        }
        if (e.getSource() == abrir) {
            miPanel.abrir();
        }
        if (e.getSource() == guardar) {
            miPanel.guardar();
        }
        if (e.getSource() == salir) {
            System.exit(0);
        }
        if (e.getSource() == linea) {
            if(miPanel.fig!=1){
                miPanel.fig=1;
                pintarborde("linea");
                miPanel.limpiaselect();
                miPanel.creafigura=true;
            }else{
            miPanel.creafigura=false;
            miPanel.fig=-1;
            linea.setBorderPainted(false);
            }      
        }
        if (e.getSource() == rectangulo) {
            if(miPanel.fig!=2){
                miPanel.fig=2;
                pintarborde("rectangulo");
                miPanel.limpiaselect();
                miPanel.creafigura=true;
            }else{
            miPanel.creafigura=false;
            miPanel.fig=-1;
            rectangulo.setBorderPainted(false);
            } 
        }
        if (e.getSource() == elipse) {
             if(miPanel.fig!=3){
                miPanel.fig=3;
                pintarborde("elipse");
                miPanel.limpiaselect();
                miPanel.creafigura=true;
            }else{
            miPanel.creafigura=false;
            miPanel.fig=-1;
            elipse.setBorderPainted(false);
            } 
        }
        if (e.getSource() == dibujarf) {
            if(!dibujarf.getSelectedItem().toString().equals("Seleccione")){
                miPanel.fig=0;
                miPanel.figguar=(String)dibujarf.getSelectedItem();
                miPanel.creafigura=true;
            }
        }
        if (e.getSource() == relleno) {
            if (miPanel.relleno) {
                miPanel.relleno = false;
                colorrelleno.setEnabled(false);
            } else {
                miPanel.relleno = true;
                colorrelleno.setEnabled(true);
            }
        }
        if (e.getSource() == colorrelleno) {
            Color color = JColorChooser.showDialog(this, "Elija un color", this.miPanel.getColorActual());
            this.colorrelleno.setBackground(color);
            this.miPanel.setRellenoActual(color);
        }
        if (e.getSource() == color) {
            Color color = JColorChooser.showDialog(this, "Elija un color", this.miPanel.getColorActual());
            this.color.setBackground(color);
            this.miPanel.setColorActual(color);
        }
        if (e.getSource() == select) {
            
            this.miPanel.select(1);
            pintarborde("select");
        }
        if (e.getSource() == selectmult) {
           
            this.miPanel.select(2);
            pintarborde("selectmult");
        }

        if (e.getSource() == tipolinea) {
            this.miPanel.tipolinea(tipolinea.getSelectedIndex());
        }
        /*if (e.getSource() == acerca) {
            JOptionPane.showMessageDialog(null, "Jiro");
        }//*/
    }
    class OyenteDeMovimiento extends MouseMotionAdapter {

        @Override
        public void mouseDragged(MouseEvent evento) {
            
        }
        @Override
    public void mouseMoved(MouseEvent ev) {
        /*if(!miPanel.creafigura){
                linea.setBorderPainted(false);
                rectangulo.setBorderPainted(false);
                elipse.setBorderPainted(false);
            }//*/
        if (!miPanel.formaselect.isEmpty()){
            elimina.setEnabled(true);
        }
    }
    }
    class OyenteDeRaton extends MouseAdapter {

        @Override
        public void mousePressed(MouseEvent evento) {

            
        }

        @Override
        public void mouseReleased(MouseEvent evento) {
            
        }
    }
    public void borraborde(){
    selectmult.setBorderPainted(false);
                select.setBorderPainted(false);
                linea.setBorderPainted(false);
                rectangulo.setBorderPainted(false);
                elipse.setBorderPainted(false);
                move.setBorderPainted(false);
    
    }
public void abrir() {
        try {
            JFileChooser jfc = createJFileChooser();
            jfc.showOpenDialog(this);
            File file = jfc.getSelectedFile();
            if (file == null) {
                return;
            }
            this.miPanel.myImage = javax.imageio.ImageIO.read(file);
            int w = this.miPanel.myImage.getWidth(null);
            int h = this.miPanel.myImage.getHeight(null);
            if (this.miPanel.myImage.getType() != BufferedImage.TYPE_INT_RGB) {
                BufferedImage bi2
                        = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
                Graphics big = bi2.getGraphics();
                big.drawImage(this.miPanel.myImage, 0, 0, null);

            }
            this.miPanel.g2D = (Graphics2D) this.miPanel.myImage.getGraphics();
            repaint();
        } catch (IOException e) {
            System.exit(1);
        }
        
    }
public JFileChooser createJFileChooser() {
        JFileChooser jfc = new JFileChooser();
        jfc.setAcceptAllFileFilterUsed(false);
        String[] fileTypes = getFormats();
        for (int i = 0; i < fileTypes.length; i++) {
            jfc.addChoosableFileFilter(new MyFileFilter(fileTypes[i], fileTypes[i] + " file"));

        }
        return jfc;
    }
 public String[] getFormats() {
        String[] formats = javax.imageio.ImageIO.getWriterFormatNames();
        java.util.TreeSet<String> formatSet = new java.util.TreeSet<String>();
        for (String s : formats) {
            formatSet.add(s.toLowerCase());
        }
        return formatSet.toArray(new String[0]);
    }

    class MyFileFilter extends javax.swing.filechooser.FileFilter {

        private String extension;
        private String description;

        public MyFileFilter(String extension, String description) {
            this.extension = extension;
            this.description = description;
        }

        @Override
        public boolean accept(File f) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            return f.getName().toLowerCase().endsWith("." + extension) || f.isDirectory();
        }

        @Override
        public String getDescription() {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            return description;
        }

        public String getExtension() {
            return extension;
        }

    }
    public void guardar() {
        try {
            JFileChooser jfc = createJFileChooser();
            jfc.showSaveDialog(this);
            File file = jfc.getSelectedFile();
            if (file == null) {
                return;
            }
            javax.swing.filechooser.FileFilter ff = jfc.getFileFilter();
            String fileName = file.getName();
            String extension = "jpg";
            if (ff instanceof MyFileFilter) {
                extension = ((MyFileFilter) ff).getExtension();
            }
            fileName = fileName + "." + extension;
            file = new File(file.getParent(), fileName);
            javax.imageio.ImageIO.write(this.miPanel.myImage, extension, file);

        } catch (Exception e) {
            System.out.println(e);
        }
    }
    private void addlisteners() {
        //acerca.addActionListener(this);
        gfig.addActionListener(this);
        tipolinea.addActionListener(this);
        move.addActionListener(this);
        selectmult.addActionListener(this);
        colorrelleno.addActionListener(this);
        select.addActionListener(this);
        salir.addActionListener(this);
        nuevo.addActionListener(this);
        guardar.addActionListener(this);
        abrir.addActionListener(this);
        color.addActionListener(this);
        dibujarf.addActionListener(this);
        relleno.addActionListener(this);
        linea.addActionListener(this);
        rectangulo.addActionListener(this);
        elipse.addActionListener(this);
    }
}
